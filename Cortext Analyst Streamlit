
import json  
import time
from typing import Dict, List, Optional, Tuple

import _snowflake  
import pandas as pd
import streamlit as st 
from snowflake.snowpark.context import (
    get_active_session,
) 
from snowflake.snowpark.exceptions import SnowparkSQLException
from snowflake.snowpark.types import StructType, StructField, StringType, DateType, TimestampType, IntegerType, Variant


AVAILABLE_SEMANTIC_MODELS_PATHS = [
    "GOLD.EV_STAR.YAML/yaml.yaml"
]
API_ENDPOINT = "/api/v2/cortex/analyst/message"
API_TIMEOUT = 50000  # in milliseconds

# Initialize a Snowpark session for executing queries
session = get_active_session()
current_user = st.experimental_user.user_name



def main():
    # Initialize session state
    if "messages" not in st.session_state:
        reset_session_state()
    show_header_and_sidebar(current_user)
    if len(st.session_state.messages) == 0:
        process_user_input("What questions can I ask?")
    display_conversation()
    handle_user_inputs()
    handle_error_notifications()


def reset_session_state():
    """Reset important session state elements."""
    st.session_state.messages = []  # List to store conversation messages
    st.session_state.active_suggestion = None  # Currently selected suggestion


def handle_new_chat():
    st.toast("Don't worry, your chat was saved", icon="ℹ️")
    reset_session_state()
    insert_chat_history(current_user)

    
def show_header_and_sidebar(username):
    """Display the header and sidebar with chat history buttons."""
    st.title("EV Transactions Analyst")
    st.markdown("Ask a question below to interact with your data.")

    if st.button("New chat", use_container_width=True):
        handle_new_chat()
  

    # Sidebar with chat history buttons
    with st.sidebar:
        st.selectbox(
            "Selected semantic model:",
            AVAILABLE_SEMANTIC_MODELS_PATHS,
            format_func=lambda s: s.split("/")[-1],
            key="selected_semantic_model_path",
            on_change=reset_session_state,
        )
        st.divider()

        # Fetch chat history from Snowflake
        chat_history_df = session.sql(get_user_chat_history(username)).to_pandas()
        

        if not chat_history_df.empty:
            st.subheader("Previous Conversations")

            for index, row in chat_history_df.iterrows():
                if st.button(row["USER_MESSAGE"], key=f"chat_{row['CHAT_ID']}"):
                    # Placeholder for click action
                    st.session_state["selected_chat"] = row["CHAT_ID"]
        


def get_user_chat_history(username):
    """
    Retrieves chat history for the logged-in user.
    
    Args:
        username (str): The current logged-in username.
    
    Returns:
        str: Snowflake SQL query to fetch user-specific chat history.
    """
    query = f"""
        SELECT 
            chat_id,
            timestamp,
            user_message,
            analyst_response
        FROM GOLD.EV_STAR.CHAT_HISTORY
        WHERE username = '{username}'
        AND user_message != 'What questions can I ask?' 
        ORDER BY timestamp DESC
    """
    return query



# st.write('st.session_state.messages', json.dumps(st.session_state.messages))



def insert_chat_history(username):
    """
    Inserts chat messages from Streamlit session state into the Snowflake table.
    
    Args:
        username (str): The current logged-in username.
    
    Returns:
        None
    """
    # Retrieve active session
    session = get_active_session()

    if session is None:
        st.error("Snowflake session is not active. Please ensure you're connected to Snowflake.")
        return

    # Convert the chat messages to JSON format
    chat_data = json.dumps(st.session_state.messages)

    # Create a DataFrame with the data to be inserted
    target_data = {
        "USERNAME": username,
        "CHAT_DATE": chat_data
    }

    st.success(f"chat_data {chat_data}")

    # Create DataFrame from the target data
    df_target = pd.DataFrame([target_data])

    # Define the schema for the DataFrame
    target_schema = StructType([
        StructField("USERNAME", StringType()),
        StructField("CHAT_DATA", Variant)  # The chat_data column stores a JSON structure
    ])

    # Create a Snowflake DataFrame using the defined schema
    df_target_snowflake = session.create_dataframe(df_target, schema=target_schema)

    # Write DataFrame to Snowflake table (append the new chat data)
    try:
        df_target_snowflake.write.mode("append").save_as_table("GOLD.EV_STAR.CHAT_HISTORY_RAW")
        st.success("Chat history successfully inserted into Snowflake!")
    except SnowparkSQLException as e:
        st.error(f"Error inserting data into Snowflake: {e}")




def handle_user_inputs():
    """Handle user inputs from the chat interface."""
    # Handle chat input
    user_input = st.chat_input("What is your question?")
    if user_input:
        process_user_input(user_input)
    # Handle suggested question click
    elif st.session_state.active_suggestion is not None:
        suggestion = st.session_state.active_suggestion
        st.session_state.active_suggestion = None
        process_user_input(suggestion)


def handle_error_notifications():
    if st.session_state.get("fire_API_error_notify"):
        st.toast("An API error has occured!", icon="🚨")
        st.session_state["fire_API_error_notify"] = False


def process_user_input(prompt: str):
    """
    Process user input, update the conversation history, and persist the chat in Snowflake.

    Args:
        prompt (str): The user's input.
    """

    # Create a new message, append to history and display 
    new_user_message = {
        "role": "user",
        "content": [{"type": "text", "text": prompt}],
    }
    st.session_state.messages.append(new_user_message)
    
    with st.chat_message("user"):
        user_msg_index = len(st.session_state.messages) - 1
        display_message(new_user_message["content"], user_msg_index)

    # Show progress indicator inside analyst chat message while waiting for response
    with st.chat_message("analyst"):
        with st.spinner("Waiting for Analyst's response..."):
            time.sleep(1)
            response, error_msg = get_analyst_response(st.session_state.messages)

            if error_msg is None:
                analyst_response = response["message"]["content"][0]["text"]
                analyst_message = {
                    "role": "analyst",
                    "content": response["message"]["content"],
                    "request_id": response["request_id"],
                }
            else:
                analyst_response = error_msg
                analyst_message = {
                    "role": "analyst",
                    "content": [{"type": "text", "text": error_msg}],
                    "request_id": response["request_id"],
                }
                st.session_state["fire_API_error_notify"] = True

            st.session_state.messages.append(analyst_message)

            # Create DataFrame for chat history with UPPERCASE column names
            chat_data = {
                "USER_MESSAGE": prompt,
                "ANALYST_RESPONSE": analyst_response,
                "USERNAME": current_user
            }
            df_chat = pd.DataFrame([chat_data])

            # Define Snowflake schema 
            chat_schema = StructType([
                StructField("USER_MESSAGE", StringType()),
                StructField("ANALYST_RESPONSE", StringType()),
                StructField("USERNAME", StringType())  
            ])


            # Convert to Snowflake-compatible DataFrame and append to table
            df_chat_snowflake = session.create_dataframe(df_chat, schema=chat_schema)
            df_chat_snowflake.write.mode("append").save_as_table("GOLD.EV_STAR.CHAT_HISTORY", column_order="name")

            st.rerun()

## what are the sales for the model name Model X?



def get_analyst_response(messages: List[Dict]) -> Tuple[Dict, Optional[str]]:
    """
    Send chat history to the Cortex Analyst API and return the response.

    Args:
        messages (List[Dict]): The conversation history.

    Returns:
        Optional[Dict]: The response from the Cortex Analyst API.
    """
    # Prepare the request body with the user's prompt
    request_body = {
        "messages": messages,
        "semantic_model_file": f"@{st.session_state.selected_semantic_model_path}",
    }

    # Send a POST request to the Cortex Analyst API endpoint
    # Adjusted to use positional arguments as per the API's requirement
    resp = _snowflake.send_snow_api_request(
        "POST",  # method
        API_ENDPOINT,  # path
        {},  # headers
        {},  # params
        request_body,  # body
        None,  # request_guid
        API_TIMEOUT,  # timeout in milliseconds
    )

    # Content is a string with serialized JSON object
    parsed_content = json.loads(resp["content"])

    # Check if the response is successful
    if resp["status"] < 400:
        # Return the content of the response as a JSON object
        return parsed_content, None
    else:
        # Craft readable error message
        error_msg = f"""
🚨 An Analyst API error has occurred 🚨

* response code: {resp['status']}
* request-id: {parsed_content['request_id']}
* error code: {parsed_content['error_code']}

Message:
{parsed_content['message']}

        """
        return parsed_content, error_msg


def display_conversation():
    """
    Display the conversation history between the user and the assistant.
    """
    for idx, message in enumerate(st.session_state.messages):
        
        role = message["role"]
        content = message["content"]
        with st.chat_message(role):
            display_message(content, idx)


def display_message(content: List[Dict[str, str]], message_index: int):
    """
    Display a single message content.

    Args:
        content (List[Dict[str, str]]): The message content.
        message_index (int): The index of the message.
    """
    for item in content:
        if item["type"] == "text":
            st.markdown(item["text"])
        elif item["type"] == "suggestions":
            # Display suggestions as buttons
            for suggestion_index, suggestion in enumerate(item["suggestions"]):
                if st.button(
                    suggestion, key=f"suggestion_{message_index}_{suggestion_index}"
                ):
                    st.session_state.active_suggestion = suggestion
        elif item["type"] == "sql":
            # Display the SQL query and results
            display_sql_query(item["statement"], message_index)
        else:
            # Handle other content types if necessary
            pass


@st.cache_data(show_spinner=False)
def get_query_exec_result(query: str) -> Tuple[Optional[pd.DataFrame], Optional[str]]:
    """
    Execute the SQL query and convert the results to a pandas DataFrame.

    Args:
        query (str): The SQL query.

    Returns:
        Tuple[Optional[pd.DataFrame], Optional[str]]: The query results and the error message.
    """
    global session
    try:
        df = session.sql(query).to_pandas()
        return df, None
    except SnowparkSQLException as e:
        return None, str(e)


def display_sql_query(sql: str, message_index: int):
    """
    Executes the SQL query and displays the results in form of data frame and charts.

    Args:
        sql (str): The SQL query.
        message_index (int): The index of the message.
    """

    # Display the SQL query
    with st.expander("SQL Query", expanded=False):
        st.code(sql, language="sql")

    # Display the results of the SQL query
    with st.expander("Results", expanded=True):
        with st.spinner("Running SQL..."):
            df, err_msg = get_query_exec_result(sql)
            if df is None:
                st.error(f"Could not execute generated SQL query. Error: {err_msg}")
                return

            if df.empty:
                st.write("Query returned no data")
                return

            # Show query results in two tabs
            data_tab, chart_tab = st.tabs(["Data 📄", "Chart 📈 "])
            with data_tab:
                st.dataframe(df, use_container_width=True)

            with chart_tab:
                display_charts_tab(df, message_index)


def display_charts_tab(df: pd.DataFrame, message_index: int) -> None:
    """
    Display the charts tab.

    Args:
        df (pd.DataFrame): The query results.
        message_index (int): The index of the message.
    """
    # There should be at least 2 columns to draw charts
    if len(df.columns) >= 2:
        all_cols_set = set(df.columns)
        col1, col2 = st.columns(2)
        x_col = col1.selectbox(
            "X axis", all_cols_set, key=f"x_col_select_{message_index}"
        )
        y_col = col2.selectbox(
            "Y axis",
            all_cols_set.difference({x_col}),
            key=f"y_col_select_{message_index}",
        )
        chart_type = st.selectbox(
            "Select chart type",
            options=["Line Chart 📈", "Bar Chart 📊"],
            key=f"chart_type_{message_index}",
        )
        if chart_type == "Line Chart 📈":
            st.line_chart(df.set_index(x_col)[y_col])
        elif chart_type == "Bar Chart 📊":
            st.bar_chart(df.set_index(x_col)[y_col])
    else:
        st.write("At least 2 columns are required")


if __name__ == "__main__":
    main()
